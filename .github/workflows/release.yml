name: Release

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

jobs:
  macos-universal-build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get version from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Fix cmake tap conflict
        run: |
          brew uninstall --ignore-dependencies cmake || true
          brew install cmake
          cmake --version

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -G "Xcode" -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: Import Application Certificates
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERT_P12 }}
          p12-password: ${{ secrets.APPLE_CERT_PASSWORD }}
          keychain: signing_application

      - name: Code Sign
        env:
          APPLE_TEAM_ID_STR: ${{ secrets.APPLE_TEAM_ID_STR }}
        run: |
          codesign --deep --strict --options=runtime --force --verify --verbose --sign "$APPLE_TEAM_ID_STR" ./build/Setekh_artefacts/Release/VST3/Setekh.vst3
          codesign --deep --strict --options=runtime --force --verify --verbose --sign "$APPLE_TEAM_ID_STR" ./build/Setekh_artefacts/Release/AU/Setekh.component

      - name: Import Installer Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_INSTALLER_P12 }}
          p12-password: ${{ secrets.APPLE_CERT_PASSWORD }}
          keychain: signing_installer

      - name: Create PKG installer
        env:
          APPLE_INSTALLER_STR: ${{ secrets.APPLE_INSTALLER_STR }}
        run: |
          mkdir -p build/pkgroot/Library/Audio/Plug-Ins/VST3
          mkdir -p build/pkgroot/Library/Audio/Plug-Ins/Components
          cp -R build/Setekh_artefacts/Release/VST3/Setekh.vst3 build/pkgroot/Library/Audio/Plug-Ins/VST3/
          cp -R build/Setekh_artefacts/Release/AU/Setekh.component build/pkgroot/Library/Audio/Plug-Ins/Components/
          pkgbuild --root build/pkgroot \
            --identifier com.fullfxmedia.setekh \
            --version $VERSION \
            --install-location / \
            --sign "$APPLE_INSTALLER_STR" \
            build/Setekh-$VERSION.pkg

      - name: Notarize & Staple PKG
        run: |
          xcrun notarytool submit build/Setekh-$VERSION.pkg \
            --apple-id "${{ secrets.APPLE_ID_EMAIL }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_ID_PASSWORD }}" \
            --wait
          xcrun stapler staple build/Setekh-$VERSION.pkg
          spctl --assess --type install --verbose build/Setekh-$VERSION.pkg

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: setekh-macos
          path: build/Setekh-*.pkg

  windows-build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get version from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $VERSION = "$env:GITHUB_REF" -replace "refs/tags/v", ""
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          echo "Set VERSION to: $VERSION"

      - name: Upgrade CMake
        run: |
          choco install cmake --version=3.22.5 --force --yes
          cmake --version

      - name: Configure
        run: cmake -G "Visual Studio 17 2022" -DBUILD_STANDALONE=OFF -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE -S . -B ./build

      - name: Build
        run: cmake --build ./build --config $env:BUILD_TYPE

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: setekh-windows
          path: |
            ./build/Setekh_artefacts/Release/VST3
            ./build/Setekh_artefacts/Release/readme.txt
            !./build/Setekh_artefacts/Release/VST3/*.exp
            !./build/Setekh_artefacts/Release/VST3/*.lib
            !./build/Setekh_artefacts/Release/LV2/*.exp
            !./build/Setekh_artefacts/Release/LV2/*.lib

  linux-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get version from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install libx11-dev libfreetype-dev libfontconfig1-dev libasound2-dev libxrandr-dev libxinerama-dev libxcursor-dev

      - name: Configure
        run: cmake -G "Unix Makefiles" -DBUILD_STANDALONE=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -S . -B ./build

      - name: Build
        run: cmake --build ./build --config $BUILD_TYPE

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: setekh-linux
          path: |
            ./build/Setekh_artefacts/Release/LV2
            ./build/Setekh_artefacts/Release/VST3
            ./build/Setekh_artefacts/Release/readme.txt
            !./build/Setekh_artefacts/Release/VST3/*.exp
            !./build/Setekh_artefacts/Release/VST3/*.lib

  package-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [windows-build, macos-universal-build, linux-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ windows, macos, linux ]
    steps:
      - name: Download ${{ matrix.os }} artifact
        uses: actions/download-artifact@v4
        with:
          name: setekh-${{ matrix.os }}
          path: artifacts/setekh-${{ matrix.os }}

      - name: Zip ${{ matrix.os }} artifact
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          cd artifacts
          if [ "${{ matrix.os }}" = "windows" ]; then
            cp -r setekh-windows/VST3/Setekh.vst3 setekh-windows/
            zip -r setekh-windows-${TAG_NAME}.zip setekh-windows/Setekh.vst3
          elif [ "${{ matrix.os }}" = "linux" ]; then
            cp setekh-linux/VST3/Setekh.vst3/Contents/x86_64-linux/Setekh.so setekh-linux/
            zip -r setekh-linux-${TAG_NAME}.zip setekh-linux/Setekh.so
          else
            zip -r setekh-macos-${TAG_NAME}.zip setekh-macos
          fi

      - name: Upload zipped artifact
        uses: actions/upload-artifact@v4
        with:
          name: setekh-${{ matrix.os }}-zipped
          path: artifacts/setekh-${{ matrix.os }}-*.zip

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: package-release
    steps:
      - name: Download zipped artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: ${{ github.ref_name }}
          files: artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}